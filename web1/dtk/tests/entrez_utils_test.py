
import mock
import pytest
from mock import MagicMock


@pytest.fixture
def client():
    with mock.patch('time.sleep') as sleep_mock, mock.patch('eutils.client.Client') as client_mock:
        client = client_mock.return_value
        # entrez_utils uses a singleton client, go in and replace it each
        # time with our mock.
        from dtk.entrez_utils import EClientWrapper
        orig_ec = EClientWrapper.ec
        orig_qs = EClientWrapper._qs
        EClientWrapper.ec = client
        EClientWrapper._qs = client._qs
        yield client

        EClientWrapper.ec = orig_ec
        EClientWrapper._qs = orig_qs



import eutils
from dtk.entrez_utils import GeoSearch, PubMedSearch, MAX_RETRIES, EutilsOKError

def test_retry_success(client):
    responses = [
            eutils.EutilsNCBIError(),
            eutils.EutilsRequestError(),
            eutils.EutilsNCBIError("OK (200): Empty id list - nothing todo")
            ]
    def fail_twice_then_empty(*args, **kwargs):
        raise responses.pop(0)
    # TODO: Used to do this on esummary, but we no longer call that with 0 results
    # (which probably means we can't hit Empty Id List anymore...)
    # This is probably no longer a realistic test.
    client.esearch.side_effect = fail_twice_then_empty

    with pytest.raises(EutilsOKError):
        gs = GeoSearch(term='a search')
    assert len(responses) == 0, "Check we actually used up responses"

def test_retry_failure(client):
    failures = []
    def fail_always(*args, **kwargs):
        failures.append(True)
        raise eutils.EutilsNCBIError()
    client.esearch.side_effect = fail_always

    with pytest.raises(eutils.EutilsNCBIError):
        gs = GeoSearch(term='a search')

    assert len(failures) == MAX_RETRIES, "Check that we retried MAX_RETRIES times"

import six
def test_pubmed_retry_failure(client):
    failures = []
    def fail_always(*args, **kwargs):
        failures.append(True)
        raise eutils.EutilsNCBIError()
    client.esearch.side_effect = fail_always
    client.einfo.side_effect = fail_always

    pm = PubMedSearch()

    assert len(failures) == 0
    with pytest.raises(eutils.EutilsNCBIError):
        pm.size()
    assert len(failures) == MAX_RETRIES

    with pytest.raises(eutils.EutilsNCBIError):
        pm.count_frequency(["search", "terms"])
    # NOTE: count_frequency will actually retry 2*MAX_RETRIES times.
    # This is because it wants to also retry after changing the unicode
    # encoding, and maybe is being too aggressive about which exceptions
    # it catches.
    assert len(failures) == MAX_RETRIES * 3

    with pytest.raises(eutils.EutilsNCBIError):
        pm.get_authors(["search", "terms"])
    # NOTE: same as above.
    assert len(failures) == MAX_RETRIES * 5

# ---------------
# Tests below use a vcr cache of recorded requests to the eutils server.
# They can be regenerated by modifying the 'mode' parameter.
# ---------------

from .std_vcr import std_vcr, before_record_request
from .tmpdir_path_helper import tmpdir_path_helper

def assert_play_count(tape, x):
    # We only assert playcount if we're actually doing playback, not recording.
    if tape.record_mode == 'none':
        assert tape.play_count == x

import vcr
# python2/3 have differences in param ordering, so we need a custom matcher
# or different dicts for each.
def custom_match(r1, r2):
    parms1 = r1.body.decode('utf8').split('&')
    parms2 = r2.body.decode('utf8').split('&')
    # py3 has an extra param here, unclear why, ignore it for now.
    parms1 = [x for x in parms1 if x != 'tool=eutils']
    parms2 = [x for x in parms2 if x != 'tool=eutils']
    assert sorted(parms1) == sorted(parms2)


ez_vcr = vcr.VCR(
        before_record_request=before_record_request,
        match_on=['uri', 'method','custom']
        )
ez_vcr.register_matcher('custom', custom_match)

def test_pubmed_vcr(tmpdir_path_helper):
    mode = 'none'
    with ez_vcr.use_cassette('dtk/testdata/eutils_vcr1.yaml', record_mode=mode) as tape:
        from dtk.entrez_utils import EClientWrapper
        EClientWrapper.classinit()
        pm = PubMedSearch(use_cache=False)
        assert_play_count(tape, 0)
        freq = pm.count_frequency(['Sjogren'])
        assert freq == 6598
        assert_play_count(tape, 1)

        size = pm.size()
        assert size == 29673706
        assert_play_count(tape, 2)

def test_pubmed_vcr_cache(tmpdir_path_helper):
    mode = 'none'
    with ez_vcr.use_cassette('dtk/testdata/eutils_vcr2.yaml', record_mode=mode) as tape:
        from dtk.entrez_utils import EClientWrapper
        EClientWrapper.classinit()

        pm = PubMedSearch(use_cache=True)
        assert_play_count(tape, 0)

        freq = pm.count_frequency(['Sjogren'])
        assert freq == 6600
        assert_play_count(tape, 1)

        freq = pm.count_frequency(['Sjogren'])
        assert freq == 6600
        assert_play_count(tape, 1)

        pm = PubMedSearch(use_cache=False)
        freq = pm.count_frequency(['Sjogren'])
        assert freq == 6600
        assert_play_count(tape, 2)

        freq = pm.count_frequency(['Diabetes'])
        assert freq == 667004
        assert_play_count(tape, 3)

        EClientWrapper.clear_cache()
        pm = PubMedSearch(use_cache=True)
        freq = pm.count_frequency(['Sjogren'])
        assert freq == 6600
        assert_play_count(tape, 4)
        freq = pm.count_frequency(['Sjogren'])
        assert freq == 6600
        assert_play_count(tape, 4)

def test_pubmed_vcr_authors(tmpdir_path_helper):
    mode = 'none'
    with ez_vcr.use_cassette('dtk/testdata/eutils_vcr3.yaml', record_mode=mode) as tape:
        from dtk.entrez_utils import EClientWrapper
        EClientWrapper.classinit()

        pm = PubMedSearch(use_cache=True)
        assert_play_count(tape, 0)

        authors = pm.get_authors(['Sjogren', 'Kruize', 'Radstake'])
        print("Authors are", authors)
        assert 'Kruize AA' in authors
        assert len(authors) == 46

        # get_authors does both a search and a fetch.
        assert_play_count(tape, 2)

        # Make sure the cached result is also good.
        authors = pm.get_authors(['Sjogren', 'Kruize', 'Radstake'])
        assert 'Kruize AA' in authors
        assert len(authors) == 46

        # We're hitting the eutils cache, nothing new from tape.
        assert_play_count(tape, 2)



def test_sra_search():
    mode = 'once'
    with ez_vcr.use_cassette('dtk/testdata/eutils_sra_vcr.yaml', record_mode=mode) as tape:
        from dtk.entrez_utils import SraSearch
        sra = SraSearch('biliary cholangitis', False)
        assert len(sra.results) == 9
        assert 'PRJNA360235' in sra.results

